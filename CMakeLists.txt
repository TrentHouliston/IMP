CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(IMP)

SET(VERSION_MAJOR 0)
SET(VERSION_MINOR 1)
SET(VERSION_PATCH 0)

# We use additional modules that cmake needs to know about
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

# This directory contains our header files
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src)

# Common C++ Flags
SET(CMAKE_CXX_FLAGS "-std=c++11")
SET(CMAKE_CXX_FLAGS_DEBUG "-O0 -g")
SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")

# XCode support
IF("${CMAKE_GENERATOR}" MATCHES "Xcode")
    message("Enabling xcode support")
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++0x")

ELSEIF("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
    SET(GCC_MINIMUM_VERSION 4.7)
    EXECUTE_PROCESS(
        COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
    IF(GCC_VERSION VERSION_LESS ${GCC_MINIMUM_VERSION})
        message(FATAL_ERROR "${PROJECT_NAME} requires g++ 4.7.2 or greater.")
    ENDIF()

    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread -Wall")
    
ELSEIF("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wpedantic -stdlib=libc++")
    
ELSE()
    MESSAGE(FATAL_ERROR "Unsupported compiler!")
ENDIF()

FILE(GLOB src "src/*.cpp", "src/*.h")
FILE(GLOB opencl "src/OpenCL/*.cl")


SOURCE_GROUP("OpenCL" FILES ${opencl})

FIND_PACKAGE(OpenCL REQUIRED)
FIND_PACKAGE(Armadillo REQUIRED)
INCLUDE_DIRECTORIES(${OPENCL_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${ARMADILLO_INCLUDE_DIRS})

ADD_EXECUTABLE(imp ${src} ${opencl})
TARGET_LINK_LIBRARIES(imp ${OPENCL_LIBRARIES} ${ARMADILLO_LIBRARIES})